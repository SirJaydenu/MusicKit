// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  relationMode = "prisma"
}

model Student {
   id Int @id @default(autoincrement())
   name String
   grade Grade
   userId String @unique
   user User @relation(fields: [userId], references: [id])
   addedSongs Song[]
   addedAlbums Album[]
   addedArtists Artist[]
}

enum Grade {
   FRESHMAN
   SOPHOMORE
   JUNIOR
   SENIOR
}

model Genre {
   id Int @id @default(autoincrement())
   name String
   songs Song[]
   albums Album[]
   artists Artist[]
}

model Song {
   id Int @id @default(autoincrement())
   addedBy String
   student Student @relation(fields: [studentId], references: [id])
   studentId Int
   approved Boolean
   name String
   artist String
   grade Grade
   genres Genre[]
}

model Album {
   id Int @id @default(autoincrement())
   addedBy String
   student Student @relation(fields: [studentId], references: [id])
   studentId Int
   approved Boolean
   name String
   artist String
   grade Grade
   genres Genre[]
}

model Artist {
   id Int @id @default(autoincrement())
   addedBy String
   student Student @relation(fields: [studentId], references: [id])
   studentId Int
   approved Boolean
   name String
   grade Grade
   genres Genre[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  student       Student?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
